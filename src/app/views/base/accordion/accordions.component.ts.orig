import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http'
import { customerService } from '../../../shared/services/customer.service'
import { UsersService } from '../../../shared/services/users.service'
import { OrdersService } from '../../../shared/services/orders.service'
import { Order, Schedule, Services, client } from '../../Model/Order';
import { Router } from '@angular/router';

@Component({
  selector: 'app-accordions',
  templateUrl: './accordions.component.html',
  styleUrls: ['./accordions.component.scss']
})
export class AccordionsComponent {
  order: Order;
  schedules: Schedule;
  service: Services;
  client: client;
  OrderForm: FormGroup;
  ServiceForm: FormGroup;
  AgendaForm: FormGroup;
  error: '';

  //Url para CR endpoint
  private urlCR: string = 'https://mocki.io/v1/5a60db03-dc07-48be-90f8-57eeb7f7f10c';

  constructor(private formBuilder: FormBuilder, private Orders: OrdersService, private users: UsersService, private customers: customerService, private http: HttpClient, private router: Router,) {
    this.error = '';
    this.order = new Order(0, [], '', '', 0, undefined);
    this.schedules = new Schedule(undefined,'', '', 0, 0)
    this.service = new Services(undefined, '', '', 0);
    this.client = new client('', '', 0, 0, 0, '', '', '', '', '')
    this.OrderForm = this.formBuilder.group({
      telefono: ['', Validators.required],
      nombres: ['', Validators.required],
      documento: ['', Validators.required],
      correo: ['', Validators.email],
      telefono1: '',
      direccion: ['', Validators.required],
      telefono2: '',
      solicitante: '',
      idOrdenProveedor: '',
      type: ['', Validators.required]
    });

    this.ServiceForm = this.formBuilder.group({
      NumeroOrden: '',
      typeservice1: 'Seleccione',
      typeservice2: 'Seleccione',
      typeservice3: 'Seleccione',
      serviced1: ['', Validators.required],
      serviced2: '',
      serviced3: '',
      servicet1: '',
      servicet2: '',
      servicet3: '',
      estado: '',
      observations: ''
    });

    this.AgendaForm = this.formBuilder.group({
      tecnico: ['', Validators.required],
      idtecnico: '',
      fecha: ['', Validators.required],
      hora: ['', Validators.required]
    });


  }

  Ejecuta() {

  }

  FindClient() {
    this.customers.GetCustomer(this.OrderForm.value.telefono).subscribe({
      next: (val: any) => {
        if (!val.message) {
          this.OrderForm.setValue({
            telefono: val.phone,
            nombres: val.names,
            documento: val.document,
            correo: val.email,
            telefono1: val.phone1,
            telefono2: val.phone2,
            direccion: val.address,
            solicitante: val.nameOfApplicant,
            idOrdenProveedor: val.numberOrderVendor,
            type: val.type
          });
        } else {
          this.OrderForm.setValue({
            telefono: this.OrderForm.value.telefono,
            nombres: '',
            documento: '',
            correo: '',
            telefono1: '',
            telefono2: '',
            direccion: '',
            solicitante: '',
            idOrdenProveedor: '',
            type: 'seleccionar',
          });
        }
      },
      error: (err: any) => {
        this.OrderForm.setValue({
          telefono: this.OrderForm.value.telefono,
          nombres: '',
          documento: '',
          correo: '',
          telefono1: '',
          telefono2: '',
          direccion: '',
          solicitante: '',
          idOrdenProveedor: '',
          type: 'seleccionar',
        });
      },
    });
  }

  GetTecnico() {
    this.users.gettechnicalByName(this.AgendaForm.value.tecnico).subscribe({
      next: (val: any) => {
        if (!val.message) {
          this.AgendaForm.setValue({
            idtecnico: val.id,
            tecnico: val.name,
            fecha: this.AgendaForm.value.fecha,
            hora: this.AgendaForm.value.hora
          });
          alert('Tecnico seleccinado: ' + val.name);
        } else {
          alert(val.message);
        }
      },
      error: (err: any) => {
        console.log('error');
        alert('Tecnico no encontrado');
      },
    });
  }

<<<<<<< HEAD
  getInvalidFieldsAgenda(): string[] {
    const invalidFields: string[] = [];

    Object.keys(this.AgendaForm.controls).forEach(field => {
      const control = this.AgendaForm.get(field);
      if (control?.invalid) {
        invalidFields.push(field);
      }
    });

    return invalidFields;
  }


  getInvalidFieldsOrder(): string[] {
    const invalidFields: string[] = [];

    Object.keys(this.OrderForm.controls).forEach(field => {
      const control = this.OrderForm.get(field);
      if (control?.invalid) {
        invalidFields.push(field);
      }
=======
  onSubmit() {
    let servicesArray: Services[] = [];
    let data = [];
    let cliente;
    let schedules;
    let service1;
    let service2;
    let service3;
    let salta=false;
    let totalCharged = 0;

    cliente = new client(this.OrderForm.value.documento, this.OrderForm.value.nombres, this.OrderForm.value.telefono, this.OrderForm.value.telefono1, this.OrderForm.value.telefono2, this.OrderForm.value.correo, this.OrderForm.value.direccion, this.OrderForm.value.solicitante, this.OrderForm.value.idOrdenProveedor, this.OrderForm.value.type);
    service1 = new Services(undefined, this.ServiceForm.value.typeservice1, this.ServiceForm.value.serviced1, parseFloat(this.ServiceForm.value.servicet1));
    schedules = new Schedule(undefined,this.AgendaForm.value.fecha, this.AgendaForm.value.hora, parseFloat(this.AgendaForm.value.idtecnico), parseFloat(this.ServiceForm.value.NumeroOrden))
    if (this.ServiceForm.value.serviced2) service2 = new Services(undefined, this.ServiceForm.value.typeservice2, this.ServiceForm.value.serviced2, parseFloat(this.ServiceForm.value.servicet2));
    if (this.ServiceForm.value.serviced3) service3 = new Services(undefined, this.ServiceForm.value.typeservice3, this.ServiceForm.value.serviced3, parseFloat(this.ServiceForm.value.servicet3));
    if (service1 && service2 && service3) {
      servicesArray = [service1, service2, service3];
      totalCharged = service1.price + service2.price + service3.price;
      salta = true;
    }
    if (service1 && service2 && !salta) {
      totalCharged = service1.price + service2.price;
      servicesArray = [service1, service2];
      salta =true;
    }
    if (service1 && !salta) {
      totalCharged = service1.price;
      servicesArray = [service1];
    }
    let order = new Order(parseFloat(this.ServiceForm.value.NumeroOrden), servicesArray, this.ServiceForm.value.estado, this.ServiceForm.value.observations, totalCharged, undefined)
    data = [{ client: cliente, "order": order, "schedules": schedules }];
    this.Orders.Saveorders(data[0]).subscribe({
      next: (val: any) => {
        val.message
        location.reload();
        alert(val.message)
      },
      error: (err: any) => {
        alert(err.message);
        console.log('error');
      },
>>>>>>> 5c0a078024a8a859d93badf0115d4349095130af
    });

    return invalidFields;
  }
  getInvalidFieldsServices(): string[] {
    const invalidFields: string[] = [];

    Object.keys(this.ServiceForm.controls).forEach(field => {
      const control = this.ServiceForm.get(field);
      if (control?.invalid) {
        invalidFields.push(field);
      }
    });

    return invalidFields;
  }


  onSubmit() {
    if (!this.AgendaForm.valid || !this.OrderForm.valid || !this.ServiceForm.valid) {
      alert('Por favor llene los campos requeridos: ' + this.getInvalidFieldsAgenda() + ' ' + this.getInvalidFieldsOrder() + ' ' + this.getInvalidFieldsServices());
    } else {

      let servicesArray: Services[] = [];
      let data = [];
      let cliente;
      let schedules;
      let service1;
      let service2;
      let service3;
      let totalCharged = 0;

      cliente = new client(this.OrderForm.value.documento, this.OrderForm.value.nombres, this.OrderForm.value.telefono, this.OrderForm.value.telefono1, this.OrderForm.value.telefono2, this.OrderForm.value.correo, this.OrderForm.value.direccion, this.OrderForm.value.solicitante, this.OrderForm.value.idOrdenProveedor, this.OrderForm.value.type);
      service1 = new Services(undefined, this.ServiceForm.value.typeservice1, this.ServiceForm.value.serviced1, parseFloat(this.ServiceForm.value.servicet1));
      schedules = new Schedule(this.AgendaForm.value.fecha, this.AgendaForm.value.hora, parseFloat(this.AgendaForm.value.idtecnico), parseFloat(this.ServiceForm.value.NumeroOrden))
      if (this.ServiceForm.value.serviced2) service2 = new Services(undefined, this.ServiceForm.value.typeservice2, this.ServiceForm.value.serviced2, parseFloat(this.ServiceForm.value.servicet2));
      if (this.ServiceForm.value.serviced3) service3 = new Services(undefined, this.ServiceForm.value.typeservice3, this.ServiceForm.value.serviced3, parseFloat(this.ServiceForm.value.servicet3));
      if (service1 && service2 && service3) {
        servicesArray = [service1, service2, service3];
        totalCharged = service1.price + service2.price + service3.price;
      }
      if (service1 && service2) {
        totalCharged = service1.price + service2.price;
        servicesArray = [service1, service2];
      }
      if (service1) {
        totalCharged = service1.price;
        servicesArray = [service1];
      }
      let order = new Order(parseFloat(this.ServiceForm.value.NumeroOrden), servicesArray, this.ServiceForm.value.estado, this.ServiceForm.value.observations, totalCharged, undefined)
      data = [{ client: cliente, "order": order, "schedules": schedules }];
      this.Orders.Saveorders(data[0]).subscribe({
        next: (val: any) => {
          val.message
          this.router.navigateByUrl('/dashboard');
          alert(val.message)
        },
        error: (err: any) => {
          alert('Error no se creo la Orden ' + err.error.message);
          console.log('Error' + JSON.stringify(err));
        },
      });
    }
  }

}
